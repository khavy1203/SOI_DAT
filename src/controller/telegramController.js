const { Telegraf, Extra } = require("telegraf");
import botTelegramService from "../services/botTelegramService";
import constant from "../constant/constant.js";
import helpers from "../helper/botHelpers";
const moment = require("moment");
const path = require("path");
const cron = require("node-cron");
const fs = require("fs");
require("dotenv").config();

const botTelegram = async (app) => {
  let isFetchingData = true;
  const bot = new Telegraf(process.env.BOT_TOKEN_LIVE);
  const arrTemp = [];
  let filterItemChange = [];
  if (isFetchingData) {
    isFetchingData = false;
    // C√¥ng vi·ªác cron m·ªói 5 gi√¢y
    await cron.schedule("*/3 * * * *", async () => {
      try {
        const data = await botTelegramService.getNewImage();
        if (data?.EC == 0 && data?.DT.length > 0) {
          if (arrTemp.length) {
            filterItemChange = data?.DT.filter(
              (itemB) =>
                !arrTemp.some((itemA) => itemA?.SessionId === itemB.SessionId)
            );
            arrTemp.length = 0;
            Array.prototype.push.apply(arrTemp, data?.DT);
          } else {
            filterItemChange = data?.DT;
            Array.prototype.push.apply(arrTemp, data?.DT);
          }
          if (filterItemChange.length) {
            for (const e of filterItemChange) {
              console.log("check e?.linkData", e?.linkData);
              const imageFilePaths = e?.linkData?.map((image) =>
                path.join(constant.netWorkPath, image.LinkHA)
              );
              imageFilePaths?.unshift(
                path.join(constant.netWorkPath, e.srcAvatar)
              );
              console.log("check_imageFilePaths", imageFilePaths);
              // ƒê∆∞·ªùng d·∫´n t·ªõi c√°c t·ªáp ·∫£nh con
              const mediaGroup = imageFilePaths
                .map((filePath) => {
                  if (fs.existsSync(filePath))
                    return {
                      type: "photo",
                      media: { source: fs.readFileSync(filePath) },
                    };
                })
                .filter((e) => !(e == undefined));
              console.log("check mediaGroup", mediaGroup);
              if (mediaGroup.length > 0) {
                let textNoti = `\n\n<b>-----------------------------------------------------</b>\n\n<i>M√£ h·ªçc vi√™n:</i><code style="color: red;"> <b style="color:red;">${
                  e?.MaDK
                }</b></code>\n<i>H·ªç T√™n H·ªçc Vi√™n:</i> <b>${
                  e?.HotenHV
                }</b>\n<i>Bi·ªÉn S·ªë:</i> <b>${
                  e?.BienSo
                }</b>\n<i>H·ªç T√™n Gi√°o Vi√™n:</i> <b>${e?.HotenGV}</b>\n<i>T·ªïng Qƒê:</i> <b>${
                  e?.TongQuangDuong
                    ? parseFloat(e.TongQuangDuong).toFixed(2)
                    : ""
                } Km</b>\n<i>T·ªïng Th·ªùi Gian:</i> <b>${
                  e?.TongThoiGian ? parseFloat(e.TongThoiGian).toFixed(2) : ""
                } Gi·ªù</b>\n<i>Th·ªùi ƒëi·ªÉm ƒêN: </i><b>${
                  e?.ThoiDiemDangNhap
                    ? moment(e.ThoiDiemDangNhap)
                        .utcOffset("+0000")
                        .format(constant.outputFormat)
                    : ""
                }</b>\n<i>Th·ªùi ƒëi·ªÉm ƒêX: </i><b>${
                  e?.ThoiDiemDangXuat
                    ? moment(e.ThoiDiemDangXuat)
                        .utcOffset("+0000")
                        .format(constant.outputFormat)
                    : ""
                }</b>\n\n`;
                const pr1 = await bot.telegram
                  .sendMessage(process.env.id_groupLiveStream, textNoti, {
                    parse_mode: "HTML",
                  })
                  .then(async () => {
                    await helpers.sleep(1.5);
                    await bot.telegram.sendMediaGroup(
                      process.env.id_groupLiveStream,
                      mediaGroup
                    );
                  });
                const pr2 = await helpers.sleep(20);
                await Promise.all([pr1, pr2]);
              } else {
                console.log("Ch∆∞a ph√°t hi·ªán phi√™n m·ªõi");
              }
            }
          }
        }
      } catch (error) {
        console.log("check error", error);
      }
    });
    isFetchingData = true;
  }

  const helpMessage = `
    `;

  const helpAdmin = `
        /testform d√πng ƒë·ªÉ test form
  `;

  try {
    bot.use(async (ctx, next) => {
      // ctx.reply('U use bot');
      try {
        console.log("bot ƒë√£ ho·∫°t ƒë·ªông");
        console.log("check group ID livestream", ctx);
        console.log("check ctx chat id", ctx.chat);

        if (isFetchingData) {
          // if (ctx.chat.id != process.env.id_groupNLTB) {
          //   await ctx.replyWithHTML('Vui l√≤ng kh√¥ng truy v·∫•n d·ªØ li·ªáu ho·∫∑c nh·∫Øn ri√™ng tr√™n tin nh·∫Øn ri√™ng c·ªßa bot, vui l√≤ng truy v·∫•n tr√™n group ch√≠nh th·ª©c : <a href="https://t.me/+NR_DldQ80ak0MTRl">DAT_NLTB</a> . Mu·ªën truy v·∫•n ri√™ng tr√™n bot, vui l√≤ng nh·∫Øn tin tr·ª±c ti·∫øp cho em Vy (0987980417) ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn nh·∫Øn tin ri√™ng tr√™n bot ü§ñü§ñ', { disable_web_page_preview: true })
          //   return
          // }
          if (!ctx?.message?.text) {
            isFetchingData = true;
            return;
          }

          if (ctx.update.message && ctx.update.message.new_chat_members) {
            for (let member of ctx.update.message.new_chat_members) {
              await ctx.reply(
                `Ch√†o m·ª´ng th·∫ßy ${member.first_name} ƒë·∫øn v·ªõi nh√≥m! \n ${helpMessage}`
              );
              return;
            }
          }
          let input = ctx.message?.text?.split(" ");

          const checkNull = input[0]?.trim();
          console.log("check gi√° tr·ªã v√†o", checkNull);
          if (!checkNull) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }

          await next(ctx); // n·∫øu middleware th√¨ c·∫ßn await next trong m·ªói r√†ng bu·ªôc
        }
      } catch (e) {
        console.log("check error", e);
        await ctx.reply(
          "L·ªói server bot, h√£y li√™n h·ªá Kh·∫£ Vy ƒë·ªÉ ƒë∆∞·ª£c fix s·ªõm nh·∫•t"
        );
        isFetchingData = true;
        return;
      }
    });

    bot.command("help", async (ctx) => {
      if (isFetchingData) {
        isFetchingData = false;
        await ctx.reply(helpMessage);
        isFetchingData = true;
        return;
      }
      isFetchingData = true;
      return;
    });
  } catch (e) {
    // G·ª≠i m·ªôt tin nh·∫Øn
    bot.telegram
      .sendMessage(
        process.env.id_groupNLTB,
        "L·ªói nghi√™m tr·ªçng, vui l√≤ng ƒë·ª£i trong gi√¢y l√°t"
      )
      .then(() => {
        console.log("ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng");
      })
      .catch((error) => {
        console.log("L·ªói khi g·ª≠i tin nh·∫Øn:", error);
      });
    isFetchingData = true;
  }

  bot.launch();

  // Enable graceful stop
  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
};
export default botTelegram;
